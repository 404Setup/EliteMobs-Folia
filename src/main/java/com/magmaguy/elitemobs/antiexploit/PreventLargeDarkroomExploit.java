package com.magmaguy.elitemobs.antiexploit;

import com.magmaguy.elitemobs.api.EliteMobDamagedByPlayerEvent;
import com.magmaguy.elitemobs.config.AntiExploitConfig;
import com.magmaguy.elitemobs.utils.NonSolidBlockTypes;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.entity.LivingEntity;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.util.Vector;

public class PreventLargeDarkroomExploit implements Listener {

    @EventHandler(priority = EventPriority.HIGHEST)
    public void onEntityDamage(EliteMobDamagedByPlayerEvent event) {

        if (event.isCancelled()) return;
        antiHopper(event);
        antiLargeRoom(event);
        antiLadder(event);
        antiDoor(event);
    }

    private void antiHopper(EliteMobDamagedByPlayerEvent event) {
        if (!AntiExploitConfig.largeDarkroomAntiexploit) return;
        if (event.getEliteMobEntity().getLivingEntity().getLocation().clone().subtract(new Vector(0, 1, 0)).getBlock().getType().equals(Material.HOPPER) ||
                event.getEliteMobEntity().getLivingEntity().getLocation().clone().subtract(new Vector(0, 1, 0)).getBlock().getType().equals(Material.HOPPER)) {
            event.getEliteMobEntity().setTriggeredAntiExploit(true);
            AntiExploitMessage.sendWarning((LivingEntity) event.getEntity(), "hopper");
        }
    }

    private void antiLargeRoom(EliteMobDamagedByPlayerEvent event) {

        Vector ray = event.getPlayer().getLocation().clone().subtract(event.getEliteMobEntity().getLivingEntity().getLocation()).toVector();
        ray.normalize();
        if (ray.getY() > 0) return;
        ray.setY(0);
        ray.multiply(0.5);
        Location tempLocation = event.getEliteMobEntity().getLivingEntity().getLocation().clone().add(new Vector(0, 1, 0));

        for (int i = 0; i < 12; i++) {
            Location previousLocation = tempLocation.clone().subtract(ray);
            if (event.getEliteMobEntity().getLivingEntity().getLocation().distanceSquared(event.getPlayer().getLocation()) <
                    event.getEliteMobEntity().getLivingEntity().getLocation().distanceSquared(tempLocation))
                return;

            if (!NonSolidBlockTypes.isNonSolidBlock(tempLocation.getBlock().getType())) {
                Location floorBlock = tempLocation.clone().subtract(new Vector(0, 2, 0));
                if (!NonSolidBlockTypes.isNonSolidBlock(floorBlock.getBlock().getType())) {
                    event.getEliteMobEntity().incrementAntiExploit(5, "antilargeroom1");
                    return;
                }
                Location previousBlockFloorBlock = previousLocation.clone().subtract(new Vector(0, 2, 0));
                if (!NonSolidBlockTypes.isNonSolidBlock(previousBlockFloorBlock.getBlock().getType()))
                    event.getEliteMobEntity().incrementAntiExploit(5, "antilargeroom2");
                return;
            }
            tempLocation.add(ray);
            //tempLocation.getWorld().spawnParticle(Particle.BARRIER, tempLocation, 1);
        }

    }

    private void antiLadder(EliteMobDamagedByPlayerEvent event) {

        Vector ray = event.getPlayer().getLocation().clone().subtract(event.getEliteMobEntity().getLivingEntity().getLocation()).toVector();
        ray.normalize();
        if (ray.getY() < 0) return;
        ray.setY(0);
        ray.multiply(0.5);
        Location tempLocation = event.getEliteMobEntity().getLivingEntity().getLocation().clone();

        for (int i = 0; i < 12; i++) {
            Location previousLocation = tempLocation.clone().subtract(ray);
            if (event.getEliteMobEntity().getLivingEntity().getLocation().distanceSquared(event.getPlayer().getLocation()) <
                    event.getEliteMobEntity().getLivingEntity().getLocation().distanceSquared(tempLocation))
                return;

            if (!NonSolidBlockTypes.isNonSolidBlock(tempLocation.getBlock().getType())) {
                Location previousBlockFloorBlock = previousLocation.clone().add(new Vector(0, 2, 0));
                //previousBlockFloorBlock.getWorld().spawnParticle(Particle.BARRIER, previousBlockFloorBlock.getBlock().getLocation().clone().add(new Vector(0.5,0.5,0.5)), 1);
                if (!NonSolidBlockTypes.isNonSolidBlock(previousBlockFloorBlock.getBlock().getType())) {
                    event.getEliteMobEntity().incrementAntiExploit(11, "antilargeroom4");
                }
                return;
            }
            tempLocation.add(ray);
            //tempLocation.getWorld().spawnParticle(Particle.BARRIER, tempLocation.getBlock().getLocation().clone().add(new Vector(0.5,0.5,0.5)), 1);
        }

    }

    private void antiDoor(EliteMobDamagedByPlayerEvent event) {
        Vector ray = event.getPlayer().getLocation().clone().subtract(event.getEliteMobEntity().getLivingEntity().getLocation()).toVector();
        ray.normalize();
        if (ray.getY() < 0) return;
        ray.setY(0);
        ray.multiply(0.5);
        Location tempLocation = event.getEliteMobEntity().getLivingEntity().getLocation().clone();

        for (int i = 0; i < 12; i++) {
            if (event.getEliteMobEntity().getLivingEntity().getLocation().distanceSquared(event.getPlayer().getLocation()) <
                    event.getEliteMobEntity().getLivingEntity().getLocation().distanceSquared(tempLocation))
                return;

            if (!NonSolidBlockTypes.isNonSolidBlock(tempLocation.getBlock().getType())) {
                Location higherLocation = tempLocation.clone().add(new Vector(0, 1, 0));
                //higherLocation.getWorld().spawnParticle(Particle.BARRIER, higherLocation.getBlock().getLocation().clone().add(new Vector(0.5,0.5,0.5)), 1);
                if (!NonSolidBlockTypes.isNonSolidBlock(higherLocation.getBlock().getType())) {
                    event.getEliteMobEntity().incrementAntiExploit(2, "antilargeroom5");
                }
                return;
            }
            tempLocation.add(ray);
            //tempLocation.getWorld().spawnParticle(Particle.BARRIER, tempLocation.getBlock().getLocation().clone().add(new Vector(0.5,0.5,0.5)), 1);
        }
    }

}
